import {
  Code,
  IRepository,
  Repository,
  RepositoryProps,
} from "aws-cdk-lib/aws-codecommit";
import { Asset } from "aws-cdk-lib/aws-s3-assets";
import { Construct } from "constructs";

interface CodeCommitConstructProps {}

/** ======================================================
 * cdk.context.json
 * codecommit: {
 *    codeDirectoryPath: "specifies the code repository containing the files
 *                        upload to the codecommit repository",
 *    repositoryName: "specify the name for the repository",
 *    asset: "s3 asset from where to fetch the code for the repository.
 *            Refer to: https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3_assets.Asset.html"
 *    branch: "specifies the branch name where to deploy the code.
 *            Valid only if codeDirectoryPath is specified"
 *    repositoryDescription: "specify a description for the repository"
 * }
 * ======================================================*/
export class CodeCommitConstruct extends Construct {
  public readonly repo: IRepository;
  constructor(
    scope: Construct,
    id: string,
    props: CodeCommitConstructProps = {}
  ) {
    super(scope, id);

    const codeCommitContext = this.node.tryGetContext("codecommit");
    const isCodeFromS3Asset: boolean = "asset" in codeCommitContext;
    const repositoryARNExists: boolean = "repositoryARN" in codeCommitContext;
    const repositoryDescription: string =
      codeCommitContext.repositoryDescription ||
      `Autogenerated repository for ${codeCommitContext.repositoryName}`;

    if (repositoryARNExists) {
      this.repo = Repository.fromRepositoryArn(
        this,
        "CodeCommitSourceRepository",
        codeCommitContext.ARN
      );
    } else if (codeCommitContext.codeDirectoryPath) {
      this.repo = new Repository(this, "CodeCommitSourceRepository", {
        repositoryName: codeCommitContext.repositoryName,
        description: repositoryDescription,
        code: isCodeFromS3Asset
          ? Code.fromAsset(
              new Asset(this, "SourceCodeAsset", {
                // TODO: handle all the other properties in S3 Asset
                path: codeCommitContext.asset.path,
              }),
              codeCommitContext.codeBranch
            )
          : codeCommitContext.codeDirectoryPath.includes("zip")
          ? Code.fromZipFile(
              codeCommitContext.codeDirectoryPath,
              codeCommitContext.codeBranch
            )
          : Code.fromDirectory(
              codeCommitContext.codeDirectoryPath,
              codeCommitContext.codeBranch
            ),
      });
    } /*else {
      this.repo = new Repository(this, "CodeCommitSourceRepository", {
        repositoryName: codeCommitContext.repositoryName,
        description: repositoryDescription,
        code: Code.fromDirectory(
          "./lib/resources/default_repo",
          codeCommitContext.codeBranch
        ),
      });
    }*/
  }
}
